makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(!is.null(inv)) {
message("Getting cached inverse...")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInverse(inv)
inv
}
View(cacheSolve)
View(makeCacheMatrix)
View(makeCacheMatrix)
## makeCacheMatrix creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL  # Initialize inverse as NULL
# Function to set the matrix
set <- function(y) {
x <<- y      # Set the matrix
inv <<- NULL  # Clear the cached inverse when matrix is updated
}
# Function to get the matrix
get <- function() x
# Function to set the cached inverse
setInverse <- function(inverse) inv <<- inverse
# Function to get the cached inverse
getInverse <- function() inv
# Return a list of functions to access the matrix and inverse
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## cacheSolve computes the inverse of the special matrix created by makeCacheMatrix
cacheSolve <- function(x, ...) {
# Check if the inverse is already cached
inv <- x$getInverse()
# If the inverse is cached, return it
if(!is.null(inv)) {
message("Getting cached inverse...")
return(inv)
}
# If not cached, compute the inverse
data <- x$get()          # Get the matrix
inv <- solve(data, ...)  # Compute the inverse
x$setInverse(inv)        # Cache the inverse
inv  # Return the computed inverse
}
# Create a special matrix object
m <- makeCacheMatrix(matrix(c(4, 7, 2, 6), nrow = 2))
# Compute the inverse (this will cache the result)
cacheSolve(m)
# Compute the inverse again (this will retrieve the cached result)
cacheSolve(m)
